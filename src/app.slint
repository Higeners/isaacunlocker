import { GridBox , ScrollView, GroupBox, ListView, HorizontalBox, CheckBox, Button, ComboBox, TabWidget, SpinBox} from "std-widgets.slint";
import "./upheavtt.ttf";
struct IsaacIcon {
	image: image,
	name: string,
	description: string,
}
struct Achievement {
	unlocked: bool,
	id: int,

}
struct Item {
	unlocked: bool,
	id: int,

}


export global Search {
	in property <[string]> saves: [1,2,3];
	in-out property <[int]> indexes: [
		0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30
	];
	in-out property <[int]> items_indexes: [
		0,1,2,3,4,5
	];

	in-out property <[int]> search_items_mask;
	in-out property <[int]> search_achievement_mask;
	in-out property <[int]> type_items_mask;
	in-out property <[int]> type_achievement_mask;

	in property <[IsaacIcon]> icons: [
		{image: @image-url("../images/achievements/1.png"), name: "Lorem ipsum dolor sit amet consectetur adipisicing elit."},
		{image: @image-url("../images/achievements/1.png")},
		{image: @image-url("../images/achievements/1.png")},
		{image: @image-url("../images/achievements/1.png")},
		{image: @image-url("../images/achievements/1.png")},
		{image: @image-url("../images/achievements/1.png")},
		{image: @image-url("../images/achievements/1.png")},
		{image: @image-url("../images/achievements/1.png")},
		{image: @image-url("../images/achievements/1.png")},
		{image: @image-url("../images/achievements/1.png")},
		{image: @image-url("../images/achievements/1.png")},
		{image: @image-url("../images/achievements/1.png")},
		{image: @image-url("../images/achievements/1.png")},
		{image: @image-url("../images/achievements/1.png")},
		{image: @image-url("../images/achievements/1.png")},
		{image: @image-url("../images/achievements/1.png")},
		{image: @image-url("../images/achievements/1.png")},
		{image: @image-url("../images/achievements/1.png")},
		{image: @image-url("../images/achievements/1.png")},
		{image: @image-url("../images/achievements/1.png")},
	];
	in property <[IsaacIcon]> items_icons: [
		{image: @image-url("../images/items/0.png"),
		name: "Sad onion"},
		{image: @image-url("../images/items/1.png")},
		{image: @image-url("../images/items/2.png")},
		{image: @image-url("../images/items/3.png")},
		{image: @image-url("../images/items/4.png")},
		{image: @image-url("../images/items/5.png")},
	];
	in-out property <[Achievement]> achievements: [
		{unlocked: true, id: 0},
		{unlocked: true, id: 1},
		{unlocked: true, id: 2},
	];
	in-out property <[Achievement]> items: [
		{unlocked: true, id: 0}
	];
	in-out property <int> Savefile: 1;
	in-out property <string> type: "All";
	callback range_change(int, int);
	callback search_change(string);
	callback select_save(int);
	callback type_select(string);
}
export global UnlockAchievements {
	callback unlock();
	callback unlock_all();
}

component Icon inherits Image {
	width: 60px;
	height: 60px;
	image-rendering: pixelated;
	in-out property <bool> has-unlocked: Search.achievements[id].unlocked;
	in property <bool> achievement;
	in property <int> id;
	out property <bool> has-hover <=> ta.has-hover;
	rect := Rectangle {
		callback pressed;
		ta:= TouchArea { 
			clicked() => {
				parent.pressed();
			}
			mouse-cursor: grab;
		}
		pressed => {
			if (root.achievement){
				Search.achievements[id].unlocked = !Search.achievements[id].unlocked;
			}
		}
		border-width: 0px;
		border-radius: 2px;
		border-color: transparent;
		
		animate border-width {duration: 100ms ; easing: ease-in-out; }
		animate border-color {
			duration: 200ms ; easing: ease-in-out;
		}
		states [ 
			unlocked_hover when (root.has-unlocked && ta.has-hover ) : {
				border-width: 3px;
				border-color: white;
			}
			unlocked_ach when (root.achievement && root.has-unlocked) : {
				border-width: 3px;
				border-color: #4188b4;
			}
			unlocked_item when (!root.achievement && root.has-unlocked) : {
				border-width: 3px;
				border-color: #4c41b4;

			}
			active when !root.has-unlocked && ta.has-hover: {
				border-width: 3px;
				border-color: #b44160;
				
			}
			inactive when !ta.has-hover && !root.has-unlocked : {
				border-width: 0px;
				border-color: transparent;
			
			}
		]
	}
} 

component IconDisplay inherits Rectangle {
	in property <length> size;
	in property <Achievement> achievement;
	in property <IsaacIcon> icon;
	in property <bool> is-achievement;
	in property <length> font-size;
	property <bool> description: (is-achievement && ic.has-hover);
	VerticalLayout {
		alignment: stretch;
		ic:= Icon {
			width: size;
			height: size;
			achievement: is-achievement;
			id: achievement.id;
			source: icon.image;
			has-unlocked: achievement.unlocked;
		}
		Text {
			height: self.font-size;
			font-size: font-size;
			text: achievement.id + 1;
			horizontal-alignment: center;
		}
		name:= Text {
			font-size: font-size;
			min-height: self.font-size;
			text: icon.name;
			color: description ? transparent : white;
			wrap: word-wrap;
			horizontal-alignment: center;
			z: 10;
			animate color {
				duration: 100ms; easing: ease;
			}
			description-text:= Text {
				horizontal-alignment: center;
				font-size: font-size;
				width: parent.width;
				text: description ? icon.description : "";
				color: !description ? transparent : black;
				wrap: word-wrap;
				animate color {
					duration: 100ms; easing: ease;
				}
			}
		}
	}
	Rectangle {
		drop-shadow-blur: 8px;
		drop-shadow-color: description ? red.transparentize(60%): transparent;
		animate drop-shadow-color {
			 duration: 100ms; easing: ease;
		}
		z: -10;
	}
}

component InputField {
	in property <length> font-size;
	in property <length> border-width;
	in property <string> input-title;
	in property <color> background-color;
	in property <color> font-color: white;
	in property <string> font-family;
	in-out property <string> text;
	callback edited;
	callback clear;
	clear => {
		textin.text = "";
		root.text = "";
	}
	HorizontalBox {
		alignment: start;
		spacing: 16px;
		Text{
			font-size: root.font-size;
			text: input-title;
			font-family: root.font-family;
			color: white;
		}
		textin:= TextInput {
			wrap: no-wrap;
			single-line: true;
			font-size: root.font-size;
			font-family: root.font-family;
			color: font-color;
			edited => {
				text = self.text;
				root.edited()
			}
		}
	}
	Rectangle {
		z: -10;
		x: textin.x - 5px - self.border-width / 2;
		background: background-color;
		clip : true;
		border-width: textin.has-focus ? 2px : root.border-width;
		width: textin.width + 10px + self.border-width / 2;
		height: textin.height + 12px + self.border-width / 2;
		border-radius: 4px;
		border-color: textin.has-focus ? #0095ff : gray.darker(10%);
		animate border-color, border-width {
			 easing: ease-out; duration: 250ms;
		}
	}
}
export component App inherits Window {
	title: "Isaac Achievement Unlocker";
	min-width: 420px;
	preferred-width: 1000px;
	preferred-height: 800px;
	background: tabs.current-index == 0 ? @linear-gradient(0deg, #111c23, #172731): @linear-gradient(0deg, #15141c, #211f2c);
	animate background {
		 duration: 300ms; easing: ease-out;
	}
	default-font-family: "Upheaval TT (BRK)";
	default-font-size: 20px;
	default-font-weight: 500;
	
	icon: @image-url("../images/icon.png");
	property <int> list-width: tiles-num.value;
	property <int> item-list-height: Math.ceil(Search.items-indexes.length / list-width);
	property <int> list-height: Math.ceil(Search.indexes.length / list-width);
	tiles-num:= SpinBox { 
		property <physical-length> space: 4px;
		z: 1000;
		width: 60px;
		height: 40px;
		x: root.width - self.width - space - 10px;
		y: root.height - self.height - space;
		minimum: 4;
		maximum: 32;
		value: 10;
	}
	Rectangle {
		x: tx.x - self.border-width / 2 - 4px;
		y: tx.y - self.border-width / 2 - 1px;
		border-width: 1px;
		border-radius: 2px;
		width: tx.width + self.border-width + 8px;
		height: tx.height + self.border-width + 4px;
		border-color: gray.darker(20%);
		background: gray.darker(40%);
		z: 5;
	}
	tx:= Text {
		z: 10;
		text: tabs.current-index == 0 ? 
		"\{Search.indexes.length}/\{Search.achievements.length}" :
		"\{Search.items-indexes.length}/\{Search.items.length}";
		x: 8px;
		font-size:24px;
		y: root.height - self.font-size - 4px;
	}
	Rectangle {
		background: transparent;
		width: input-tab.width;
		height: input-tab.height; 
		x: input-tab.x;
		y: input-tab.y;
		border-width: 4px;
		border-color: #454242;
	}
	VerticalLayout {
		input-tab:= VerticalLayout {
			padding-left: 6px;
			padding-top: 8px;
			spacing: -4px;
			search:= InputField {
				input-title: "Search:";
				font-size: 40px;
				border-width: 1px;
				background-color: gray.darker(40%);
				font-color: white;
				edited => {
					range-from.clear();
					range-to.clear();
					Search.search-change(self.text);
				}
			}
			HorizontalBox {
				padding: 0px;
				spacing: 0px;
				alignment: start;
				range-from:= InputField {
					input-title: tabs.current-index == 0 ? "Range of achievements:" : "Range of items:";
					animate width {
						 duration: 100ms; easing: ease-in;
					}
					font-size: 40px;
					font-color: white;
					border-width: 1px;
					background-color: gray.darker(40%);
					edited => {
						search.clear();
						Search.range-change(range-from.text.to-float(), range-to.text.is-float() ? range-to.text.to-float(): 900);
					}
				}
				range-to:= InputField {
					input-title: "-";
					font-size: 40px;
					
					border-width: 1px;
					background-color: gray.darker(40%);
					font-color: white;
					edited => {
						search.clear();
						Search.range-change(range-from.text.to-float(), range-to.text.is-float() ? range-to.text.to-float(): 900);
					}
				}
			}
			saves:= HorizontalBox {
				alignment: space-between;
				HorizontalBox {
					alignment: start;
					padding: 0;
					Text {
						font-size: 40px;
						text: "Savefile: ";
					}
					ComboBox { 
						padding-left: 10px;
						width: 60px;
						model: Search.saves;
						current-value: Search.Savefile;
						selected(ind) => {
							Search.Savefile = ind.to-float();
							Search.select-save(ind.to-float());
						}
					}	
				}
				HorizontalBox {
					alignment: start;
					padding: 0;
					Text {
						text: "Unlock filter:";
						font-size: 40px;
					}
					type:= ComboBox {
						model: [
							"All",
							"Locked",
							"Unlocked"
						];
						selected(type) => {
							Search.type = type;
							Search.type-select(type);
						}
					}
				}
			}
			HorizontalBox {
				alignment: center;
				Button { 
					text: "Unlock";
					width: 250px;
					clicked => {
						UnlockAchievements.unlock();
					}
				}
				Button {
					text: "Unlock All";
					width: 350px;
					clicked => {
						UnlockAchievements.unlock-all();
					}
				}
			}

			
		}
		tabs:= TabWidget {
			property <length> size: (root.width - 2 * 4px - (list-width - 1) * 16px - 16px) / list-width;
			property <length> font-size: root.width * 15% * 1/list-width;
			Tab {
				title: "Achievements";
				ListView  {
					for i in list-height : HorizontalLayout{
						alignment: start;
						padding: 4px;
						spacing: 16px;
						property <int> list_actual_width: Math.min(Search.indexes.length - i * list-width, list-width);
						for t in list_actual_width : IconDisplay {
							property <int> index: Search.indexes[t + i * list-width];
							icon: Search.icons[index];
							achievement: Search.achievements[index];
							is-achievement: true;
							size: size;
							font-size: font-size;
						}
					}
				}
			}
			Tab {
				title: "Items";
				ListView {
					property <int> list-height: Math.ceil(Search.items-indexes.length / list-width);
					for i in list-height : HorizontalLayout{
						padding: 4px;
						spacing: 16px;
						property <int> list_actual_width: Math.min(Search.items-indexes.length - i * list-width, list-width);
						for t in list_actual_width : IconDisplay {
							property <int> index: Search.items-indexes[t + i * list-width];
							icon: Search.items-icons[index];
							achievement: Search.items[index];
							is-achievement: false;
							size: size;
							font-size: font-size;
						}
					}
				}
			}
		}
	}
}